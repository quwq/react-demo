const srcRoot = './src';const path = require('path');const HtmlWebpackPlugin = require('html-webpack-plugin');const opn = require('opn'); // 打开浏览器const Webpack = require('webpack');const isDev = process.env.NODE_ENV === 'development';const config = {    entry: {        app: path.join(__dirname, '../src/app.js')  // app.js作为打包的入口    },    output: {        filename: '[name].[hash].js',  //name代表entry对应的名字; hash代表 整个app打包完成后根据内容加上hash。一旦整个文件内容变更，hash就会变化        path: path.join(__dirname, '../dist'), // 打包好之后的输出路径        // publicPath: path.join(__dirname, 'dist') // 静态资源文件引用时的路径（加在引用静态资源前面的）    },    // 配置loader    module: {        rules: [            {                test: /.jsx$/, //使用loader的目标文件。这里是.jsx                loader: 'babel-loader'            },            {                test: /.(js)$/, //使用loader的目标文件。这里是.js                loader: 'babel-loader',                exclude: [                    path.join(__dirname, '../node_modules')  // 由于node_modules都是编译过的文件，这里我们不让babel去处理其下面的js文件                ]            },            {                test: /\.css$/,                use: ['style-loader', 'css-loader'],                include: path.resolve(srcRoot)            },            {                test: /\.scss$/,                use: ['style-loader', 'css-loader', 'sass-loader'],                include: path.resolve(srcRoot)            },            {                test: /\.(png|jpg|jpeg)$/,                use: 'url-loader?limit=8192&name=images/[name].[hash].[ext]',                include: path.resolve(srcRoot)            }        ]    },    plugins: [        new HtmlWebpackPlugin({            template: path.join(__dirname, '../src/index.html') // 作为模板文件生成html        })    ]};// 是否if (isDev) {    config.devServer = {        port: 8088,        contentBase: './dist',        overlay: true, // 开启错误调试,        hot: true,  //是否开启hot-module-replacement        /*打开浏览器 并打开本项目网址*/        after() {            opn('http://localhost:' + this.port);        }    };    config.plugins.push(new Webpack.HotModuleReplacementPlugin())}module.exports = config;